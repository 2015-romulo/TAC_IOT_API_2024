iot-events-api/
│
├── controllers/
│   └── eventController.js
│
├── models/
│   └── event.js
│
├── routes/
│   └── eventRoutes.js
│
├── .env
├── app.js
├── package.json
└── README.md


Inicialize o projeto:
mkdir iot-events-api
cd iot-events-api
npm init -y

Instale as dependências:
npm install express mongoose dotenv

Configure o servidor Express (app.js):
// app.js
const express = require('express');
const mongoose = require('mongoose');
const dotenv = require('dotenv');
const eventRoutes = require('./routes/eventRoutes');

dotenv.config();

const app = express();
const PORT = process.env.PORT || 3000;

// Middleware
app.use(express.json());

// Connect to MongoDB
mongoose.connect(process.env.MONGO_URI, {
  useNewUrlParser: true,
  useUnifiedTopology: true,
  bufferCommands: false, // Desativa o buffer de comandos
  serverSelectionTimeoutMS: 5000, // Tempo limite de seleção de servidor em milissegundos
  socketTimeoutMS: 45000, // Tempo limite de soquete em milissegundos
}).then(() => {
  console.log('Connected to MongoDB');
}).catch(err => {
  console.error('Failed to connect to MongoDB', err);
});

// Routes
app.use('/api/events', eventRoutes);

app.listen(PORT, () => {
  console.log(`Server running on port ${PORT}`);
});

.env
PORT=3000
MONGO_URI=mongodb://localhost:27017/iot_events_db


Crie o modelo Mongoose para eventos (models/event.js):
// models/event.js
const mongoose = require('mongoose');

const eventSchema = new mongoose.Schema({
  person: {
    id: { type: Number, required: true },
    name: { type: String, required: true }
  },
  deviceId: { type: Number, required: true },
  description: { type: String, required: true },
  type: { type: String, required: true },
  timestamp: { type: Date, default: Date.now },
  additionalDetails: { type: String }
});

const Event = mongoose.model('Event', eventSchema);

module.exports = Event;


Crie o controlador para eventos (controllers/eventController.js):
// controllers/eventController.js
const Event = require('../models/event');

// Create a new event
exports.createEvent = async (req, res) => {
  try {
    const newEvent = new Event(req.body);
    const savedEvent = await newEvent.save();
    res.status(201).json(savedEvent);
  } catch (err) {
    res.status(400).json({ error: err.message });
  }
};

// Get all events
exports.getAllEvents = async (req, res) => {
  try {
    const events = await Event.find();
    res.status(200).json(events);
  } catch (err) {
    res.status(500).json({ error: err.message });
  }
};

// Get a single event by ID
exports.getEventById = async (req, res) => {
  try {
    const event = await Event.findById(req.params.id);
    if (!event) {
      return res.status(404).json({ message: 'Event not found' });
    }
    res.status(200).json(event);
  } catch (err) {
    res.status(500).json({ error: err.message });
  }
};

// Update an event
exports.updateEvent = async (req, res) => {
  try {
    const updatedEvent = await Event.findByIdAndUpdate(req.params.id, req.body, { new: true });
    if (!updatedEvent) {
      return res.status(404).json({ message: 'Event not found' });
    }
    res.status(200).json(updatedEvent);
  } catch (err) {
    res.status(400).json({ error: err.message });
  }
};

// Delete an event
exports.deleteEvent = async (req, res) => {
  try {
    const deletedEvent = await Event.findByIdAndDelete(req.params.id);
    if (!deletedEvent) {
      return res.status(404).json({ message: 'Event not found' });
    }
    res.status(200).json({ message: 'Event deleted successfully' });
  } catch (err) {
    res.status(500).json({ error: err.message });
  }
};


Crie as rotas para eventos (routes/eventRoutes.js):
// routes/eventRoutes.js
const express = require('express');
const router = express.Router();
const eventController = require('../controllers/eventController');

router.post('/', eventController.createEvent);
router.get('/', eventController.getAllEvents);
router.get('/:id', eventController.getEventById);
router.put('/:id', eventController.updateEvent);
router.delete('/:id', eventController.deleteEvent);

module.exports = router;

Executando o Projeto
node app.js


Criar um evento:
POST /api/events
{
  "person": { "id": 1, "name": "Juca" },
  "deviceId": 2,
  "description": "Comunicação falhou",
  "type": "falha",
  "additionalDetails": "Perda de sinal"
}
